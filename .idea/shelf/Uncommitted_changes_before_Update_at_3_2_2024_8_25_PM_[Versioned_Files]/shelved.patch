Index: StudentInfoSystem.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nimport csv\r\nfrom csv import DictWriter, DictReader\r\nimport os.path\r\nimport os\r\nfrom functools import partial\r\n\r\nfrom PyQt5 import uic, QtCore, QtGui, QtWidgets\r\nfrom PyQt5.QtWidgets import QMessageBox, QFileDialog, QTableWidgetItem, QTableWidget, QComboBox, QLineEdit, QGroupBox, \\\r\n    QDialog, QInputDialog, QLabel, QVBoxLayout, QPushButton, QFormLayout\r\nfrom PyQt5.uic import loadUiType\r\n\r\n# GLOBAL VARIABLES\r\nfilename_studentCSV = \"university_records.csv\"\r\nfilename_courseCSV = \"course_records.csv\"\r\nstudent_field_csv = ['IDNumber', 'Name', 'Year Level', 'Gender', 'Course Code']\r\ncourse_field_csv = ['Course Code', 'Course Name']\r\nMainForm, _ = loadUiType(\"GUIforSSIS.ui\")\r\nclass StudentInformationEditor(QDialog, MainForm):\r\n    def __init__(self, parent, studentIDnum):\r\n        super().__init__(parent)\r\n\r\n        self.setWindowTitle(\"Student Information Editor\")\r\n        self.setGeometry(100, 100, 300, 100)\r\n\r\n        self.studentID = studentIDnum\r\n\r\n        self.name_label = QLabel('New Name:')\r\n        self.name_edit = QLineEdit()\r\n\r\n        self.year_label = QLabel('New Year Level:')\r\n        self.year_edit = QLineEdit()\r\n\r\n        self.gender_label = QLabel('New Gender:')\r\n        self.gender_edit = QLineEdit()\r\n\r\n        self.course_label = QLabel('Course Code:')\r\n        self.course_combo = QComboBox()\r\n        # Code to populate the combobox, same function used in the Controller class.\r\n        course_list = []\r\n        # Open CSV File and store data to a variable\r\n        with open('course_records.csv', 'r') as file:\r\n            courselist = csv.reader(file)\r\n            next(courselist)\r\n            # For loop to read the values of the Course Name column\r\n            for row in courselist:\r\n                course_list.append(row[0])  # Populate the list of course_code\r\n        self.course_combo.addItems(course_list)\r\n\r\n        self.update_button = QPushButton('Update Info', self)\r\n        self.update_button.clicked.connect(self.update_student)\r\n        self.cancel_button = QPushButton('Cancel', self)\r\n        self.cancel_button.clicked.connect(self.cancel)\r\n\r\n        self.layout = QVBoxLayout()\r\n        self.layout.addWidget(self.name_label)\r\n        self.layout.addWidget(self.name_edit)\r\n        self.layout.addWidget(self.year_label)\r\n        self.layout.addWidget(self.year_edit)\r\n        self.layout.addWidget(self.gender_label)\r\n        self.layout.addWidget(self.gender_edit)\r\n        self.layout.addWidget(self.course_label)\r\n        self.layout.addWidget(self.course_combo)\r\n        self.layout.addWidget(self.update_button)\r\n        self.layout.addWidget(self.cancel_button)\r\n        self.setLayout(self.layout)\r\n    def update_student(self):\r\n        try:\r\n            student_id = self.studentID\r\n            new_name = self.name_edit.text()\r\n            new_yearlevel = self.year_edit.text()\r\n            new_gender = self.gender_edit.text()\r\n            new_course = self.course_combo.currentText()\r\n            updated_values = {'IDNumber': student_id, 'Name': new_name, 'Year Level': new_yearlevel, 'Gender': new_gender, 'Course Code': new_course}\r\n            # Read the CSV file and load its contents into a list of dictionaries\r\n            rows = []\r\n            with open(filename_studentCSV, 'r', newline='') as csvfile:\r\n                studentcsv = csv.DictReader(csvfile)\r\n                for row in studentcsv:\r\n                    rows.append(row)\r\n            # Find the specific row you want to edit based on the IDNumber\r\n            for row in rows:\r\n                if row['IDNumber'] == student_id:\r\n                    # Modify the values in the dictionary for the desired fields\r\n                    row.update(updated_values)\r\n                    break  # Break the loop once the row is found and updated\r\n            # Write the updated data back to the CSV file\r\n            with open(filename_studentCSV, 'w', newline='') as csvfile:\r\n                studentcsv_update = csv.DictWriter(csvfile, fieldnames=student_field_csv, extrasaction='ignore')\r\n                # Write the Headers\r\n                studentcsv_update.writeheader()\r\n                # Write the updated rows\r\n                studentcsv_update.writerows(rows)\r\n            update_success = QMessageBox()\r\n            update_success.setWindowTitle('Success!')\r\n            update_success.setText('Student information updated successfully!')\r\n            update_success.setIcon(QMessageBox.Information)\r\n            update_success.exec_()\r\n            self.close()\r\n        except Exception as e:  # Catch any exceptions\r\n            print(f\"An error occurred: {e}\")\r\n            error_message = QMessageBox()\r\n            error_message.setWindowTitle('Error')\r\n            error_message.setText(f\"An error occurred while updating: {e}\")\r\n            error_message.setIcon(QMessageBox.Critical)\r\n            error_message.exec_()\r\n    def cancel(self):\r\n        self.close()\r\n\r\nclass Controller(QtWidgets.QMainWindow, MainForm):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.show()\r\n        # Creating the CSV files for student and course records\r\n        self.createCSV.clicked.connect(self.createcsvfiles)\r\n        # Populating the Tables for the SSIS Application\r\n        self.loadstudentCSV(\"university_records.csv\", self.studentInfoDisplay)\r\n        self.loadcourseCSV('course_records.csv', self.courseListDisplay)\r\n        # Populating the ComboBox for the Course Picker\r\n        self.coursepickerbox = self.findChild(QComboBox, 'coursePicker')\r\n        self.loadcoursecode()\r\n        # Opening the Dialog\r\n\r\n        # Adding the student info\r\n        self.addStudent.clicked.connect(self.addstudent)\r\n        # Deleting student info\r\n        self.deleteStudent.clicked.connect(self.deletestudent)\r\n        # Editing student info\r\n        self.editStudent.clicked.connect(self.editstudent)\r\n        # Adding course\r\n        self.addCourse.clicked.connect(self.addcourse)\r\n        # Deleting a course from the CSV file\r\n        self.deleteCourse.clicked.connect(self.deletecourse)\r\n\r\n\r\n\r\n    def pushButton_handler(self):\r\n        course = self.coursepickerbox.currentText()\r\n        idnum = self.idNumberInput.text()\r\n        name = self.nameInput.text()\r\n        year = self.yearlvlInput.text()\r\n        gender = self.genderInput.text()\r\n        print(course, idnum, name, year, gender)\r\n\r\n\r\n    def createcsvfiles(self) -> None:\r\n        if os.path.exists('university_records.csv') and os.path.exists('course_records.csv'):\r\n            dialog_exist_already = QMessageBox()\r\n            dialog_exist_already.setText('CSV files already exist!')\r\n            dialog_exist_already.setWindowTitle('CSV files already created')\r\n            dialog_exist_already.setIcon(QMessageBox.Critical)\r\n            dialog_exist_already.setStandardButtons(QMessageBox.Close)\r\n            dialog_exist_already.exec_()\r\n        else:\r\n            with open(filename_studentCSV, 'w', newline='') as studentCSV:\r\n                csvwriter_student = DictWriter(studentCSV, fieldnames=student_field_csv)\r\n                csvwriter_student.writeheader()\r\n            with open(filename_courseCSV, 'w', newline='') as courseCSV:\r\n                csvwriter_course = DictWriter(courseCSV, fieldnames=course_field_csv)\r\n                csvwriter_course.writeheader()\r\n            dialog_exist = QMessageBox()\r\n            dialog_exist.setWindowTitle('Files created')\r\n            dialog_exist.setText('Student and Course CSV files created.')\r\n            dialog_exist.setIcon(QMessageBox.Information)\r\n            dialog_exist.exec_()\r\n\r\n    def loadstudentCSV(self, filename, tableWidget):\r\n        filepath = f\"{filename}\"\r\n        if filepath:\r\n            tableWidget.setRowCount(0)\r\n            tableWidget.setColumnCount(0)\r\n            # Read CSV file and populate QTableWidget\r\n            with open(filepath, 'r') as file:\r\n                reader = csv.reader(file)\r\n                data = list(reader)\r\n            if data:\r\n                # Set column headers using the first row of the CSV file\r\n                headers = data[0]\r\n                tableWidget.setColumnCount(len(headers))\r\n                tableWidget.setHorizontalHeaderLabels(headers)\r\n\r\n                # Populate the table with data excluding the header row\r\n                for row in range(1, len(data)):\r\n                    tableWidget.insertRow(row - 1)\r\n                    for column in range(len(headers)):\r\n                        item = QTableWidgetItem(data[row][column])\r\n                        tableWidget.setItem(row - 1, column, item)\r\n\r\n                # Sets the column widths for the ID Number, Name, Year Level, Gender, and Course Code fields.\r\n                tableWidget.setColumnWidth(0, 70)\r\n                tableWidget.setColumnWidth(1, 180)\r\n                tableWidget.setColumnWidth(2, 70)\r\n                tableWidget.setColumnWidth(3, 75)\r\n                tableWidget.setColumnWidth(4, 80)\r\n\r\n    def loadcourseCSV(self, filename, tableWidget):\r\n        filepath = f\"{filename}\"\r\n        if filepath:\r\n            tableWidget.setRowCount(0)\r\n            tableWidget.setColumnCount(0)\r\n            # Read CSV file and populate QTableWidget\r\n            with open(filepath, 'r') as file:\r\n                reader = csv.reader(file)\r\n                data = list(reader)\r\n            if data:\r\n                # Set column headers using the first row of the CSV file\r\n                headers = data[0]\r\n                tableWidget.setColumnCount(len(headers))\r\n                tableWidget.setHorizontalHeaderLabels(headers)\r\n\r\n                # Populate the table with data excluding the header row\r\n                for row in range(1, len(data)):\r\n                    tableWidget.insertRow(row - 2)\r\n                    for column in range(len(headers)):\r\n                        item = QTableWidgetItem(data[row][column])\r\n                        tableWidget.setItem(row - 2, column, item)\r\n\r\n                # Sets the width for the Course Code and Course Name columns\r\n                tableWidget.setColumnWidth(0, 90)\r\n                tableWidget.setColumnWidth(1, 190)\r\n\r\n    def loadcoursecode(self):\r\n        course_list = []\r\n        # Open CSV File and store data to a variable\r\n        with open('course_records.csv', 'r') as file:\r\n            courserecord = csv.reader(file)\r\n            next(courserecord)\r\n            # For loop to read the values of the Course Name column\r\n            for row in courserecord:\r\n                course_list.append(row[0])  # Populate the list of course_code\r\n        self.coursepickerbox.addItems(course_list)\r\n\r\n    def updatestudenttable(self):\r\n        # Clear the existing data in the table\r\n        self.studentInfoDisplay.clearContents()\r\n        self.studentInfoDisplay.setRowCount(0)\r\n        # Read data from the CSV file. Will work for either the student or course CSV file.\r\n        with open(filename_studentCSV, mode='r') as csvfile:\r\n            student_read = csv.DictReader(csvfile)\r\n            for row_dict in student_read:\r\n                row_position = self.studentInfoDisplay.rowCount()\r\n                self.studentInfoDisplay.insertRow(row_position)\r\n                # Appending the values into the table\r\n                for col_num, key in enumerate(['IDNumber', 'Name', 'Year Level', 'Gender', 'Course Code']):\r\n                    item = QTableWidgetItem(str(row_dict[key]))\r\n                    self.studentInfoDisplay.setItem(row_position, col_num, item)\r\n    def updatecoursetable(self):\r\n        # Clear the existing data in the table\r\n        self.courseListDisplay.clearContents()\r\n        self.courseListDisplay.setRowCount(0)\r\n        # Read data from the CSV file. Will work for either the student or course CSV file.\r\n        with open(filename_courseCSV, mode='r') as csvfile:\r\n            course_read = csv.DictReader(csvfile)\r\n            for row_dict in course_read:\r\n                if course_read.line_num == 2:\r\n                    continue\r\n\r\n                row_position = self.courseListDisplay.rowCount()\r\n                self.courseListDisplay.insertRow(row_position)\r\n                # Appending the values into the table\r\n                for col_num, key in enumerate(['Course Code', 'Course Name']):\r\n                    item = QTableWidgetItem(str(row_dict[key]))\r\n                    self.courseListDisplay.setItem(row_position, col_num, item)\r\n\r\n    def addstudent(self):\r\n        # Get input from text fields\r\n        id_input = self.idNumberInput.text()\r\n        name_input = self.nameInput.text()\r\n        year_input = self.yearlvlInput.text()\r\n        gender_input = self.genderInput.text()\r\n        course_input = self.coursepickerbox.currentText()\r\n        # Add values to the CSV file\r\n        with open(filename_studentCSV, mode='a', newline='') as file:\r\n            writer = csv.DictWriter(file, fieldnames= student_field_csv, extrasaction='ignore')\r\n            writer.writerow({'IDNumber': id_input, 'Name': name_input, 'Year Level': year_input, 'Gender': gender_input, 'Course Code': course_input})\r\n        # Call the function to update the table whenever the button is clicked\r\n        self.updatestudenttable()\r\n    def addcourse(self):\r\n        # Get input from text fields\r\n        course_code_input = self.courseCodeInput.text()\r\n        course_name_input = self.courseNameInput.text()\r\n        # Add values to the CSV file\r\n        with open(filename_courseCSV, mode='a', newline='') as file:\r\n            append = csv.DictWriter(file, fieldnames= course_field_csv, extrasaction='ignore')\r\n            append.writerow({'Course Code': course_code_input, 'Course Name': course_name_input})\r\n        # Call the function to update the table whenever the button is clicked\r\n        self.updatecoursetable()\r\n\r\n\r\n    def deletestudent(self):\r\n        key = 'IDNumber'\r\n        deleteDialog = QInputDialog()\r\n        id_value, okPressed = deleteDialog.getText(self, \"Delete Student Information\", \"Enter student ID number: \")\r\n        if okPressed and id_value != '':\r\n            rows = []\r\n            with open(filename_studentCSV, 'r', newline='') as csvfile:\r\n                reader = csv.DictReader(csvfile, fieldnames=student_field_csv)\r\n                for row in reader:\r\n                    rows.append(row)\r\n            # Identify the row to delete\r\n            index_to_delete = None\r\n            for i, row in enumerate(rows):\r\n                if row[key] == id_value:\r\n                    index_to_delete = i\r\n                    break\r\n            # Remove the corresponding dictionary\r\n            del rows[index_to_delete]\r\n            #  Write the updated list of dictionaries back to the CSV file\r\n            with open(filename_studentCSV, 'w', newline='') as csvfile:\r\n                writer = csv.DictWriter(csvfile, fieldnames=student_field_csv)\r\n                writer.writerows(rows)\r\n                # Popup notification if student info is deleted.\r\n                student_del = QMessageBox()\r\n                student_del.setWindowTitle('Student Delete')\r\n                student_del.setText('Student with ID Number: ' + id_value + ' has been deleted.')\r\n                student_del.setIcon(QMessageBox.Information)\r\n                student_del.exec_()\r\n\r\n        else:\r\n            # Popup notification if student id number does not exist.\r\n            student_not_exist = QMessageBox()\r\n            student_not_exist.setWindowTitle('Student Delete')\r\n            student_not_exist.setText('Student with ID Number: ' + id_value + ' does not exist!')\r\n            student_not_exist.setIcon(QMessageBox.Critical)\r\n            student_not_exist.setStandardButtons(QMessageBox.Close)\r\n            student_not_exist.exec_()\r\n\r\n        self.updatestudenttable()\r\n\r\n    def deletecourse(self):\r\n        key_identifier = 'Course Code'\r\n        deletecourseDialog = QInputDialog()\r\n        course_codevalue, okPressed = deletecourseDialog.getText(self, \"Delete Course\", \"Enter course code: \")\r\n        if okPressed and course_codevalue != '':\r\n            rows = []\r\n            with open(filename_courseCSV, 'r', newline='') as csvfile:\r\n                coursereader = csv.DictReader(csvfile, fieldnames=course_field_csv)\r\n                for row in coursereader:\r\n                    rows.append(row)\r\n            # Identify the row to delete\r\n            index_to_delete = None\r\n            for i, row in enumerate(rows):\r\n                if row[key_identifier] == course_codevalue:\r\n                    index_to_delete = i\r\n                    break\r\n            # Remove the corresponding dictionary\r\n            del rows[index_to_delete]\r\n            #  Write the updated list of dictionaries back to the CSV file\r\n            with open(filename_courseCSV, 'w', newline='') as csvfile:\r\n                writer = csv.DictWriter(csvfile, fieldnames=course_field_csv)\r\n                writer.writerows(rows)\r\n                # Pop up notification to confirm that course has been deleted from the CSV file\r\n                course_del = QMessageBox()\r\n                course_del.setWindowTitle('Course Delete')\r\n                course_del.setText('Course with code: ' + course_codevalue + ' has been deleted.')\r\n                course_del.setIcon(QMessageBox.Information)\r\n                course_del.exec_()\r\n        else:\r\n            # Popup notification if course code does not exist in the CSV file.\r\n            course_not_exist = QMessageBox()\r\n            course_not_exist.setWindowTitle('Course Delete')\r\n            course_not_exist.setText('Course with code: ' + course_codevalue + ' does not exist!')\r\n            course_not_exist.setIcon(QMessageBox.Critical)\r\n            course_not_exist.setStandardButtons(QMessageBox.Close)\r\n            course_not_exist.exec_()\r\n\r\n        self.updatecoursetable()\r\n\r\n    def editstudent(self):\r\n       # Code for the QInputDialog for the ID Number input\r\n        key = 'IDNumber'\r\n        enteridnum = QInputDialog()\r\n        studentID_edit, ok = enteridnum.getText(self, \"Edit Student\", \"Enter student ID number to edit info: \")\r\n        studentID = str(studentID_edit)\r\n\r\n        if ok and studentID_edit:\r\n            try:\r\n                self.update_dialog = StudentInformationEditor(self, studentID)  # Pass self and studentID\r\n                self.update_dialog.show()\r\n                self.update_dialog.exec_()\r\n                self.updatestudenttable()\r\n            except Exception as e:  # Add exception handling\r\n                print(f\"An error occurred: {e}\")\r\n                error_message = QMessageBox()\r\n                error_message.setWindowTitle('Error')\r\n                error_message.setText(f\"An error occurred: {e}\")\r\n                error_message.setIcon(QMessageBox.Critical)\r\n                error_message.exec_()\r\n        else:\r\n            not_updated = QMessageBox()\r\n            not_updated.setWindowTitle('Update Student Info')\r\n            not_updated.setText('Student ID Number does not exist!')\r\n            not_updated.setIcon(QMessageBox.Warning)\r\n            not_updated.setStandardButtons(QMessageBox.Close)\r\n            not_updated.exec_()\r\n\r\n\r\napp = QtWidgets.QApplication(sys.argv)\r\nwindow = Controller()\r\nsys.exit(app.exec_())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/StudentInfoSystem.py b/StudentInfoSystem.py
--- a/StudentInfoSystem.py	(revision 08bc10c42e548d444fea2ee96d77ba2b610bada3)
+++ b/StudentInfoSystem.py	(date 1709382139785)
@@ -111,6 +111,7 @@
     def __init__(self):
         super().__init__()
         self.setupUi(self)
+        self.setWindowTitle('Student Information System')
         self.show()
         # Creating the CSV files for student and course records
         self.createCSV.clicked.connect(self.createcsvfiles)
@@ -305,23 +306,30 @@
                     index_to_delete = i
                     break
             # Remove the corresponding dictionary
-            del rows[index_to_delete]
-            #  Write the updated list of dictionaries back to the CSV file
-            with open(filename_studentCSV, 'w', newline='') as csvfile:
-                writer = csv.DictWriter(csvfile, fieldnames=student_field_csv)
-                writer.writerows(rows)
-                # Popup notification if student info is deleted.
+            if index_to_delete is not None:
+                del rows[index_to_delete]
                 student_del = QMessageBox()
                 student_del.setWindowTitle('Student Delete')
                 student_del.setText('Student with ID Number: ' + id_value + ' has been deleted.')
                 student_del.setIcon(QMessageBox.Information)
                 student_del.exec_()
-
-        else:
-            # Popup notification if student id number does not exist.
-            student_not_exist = QMessageBox()
-            student_not_exist.setWindowTitle('Student Delete')
-            student_not_exist.setText('Student with ID Number: ' + id_value + ' does not exist!')
+            else:
+                student_not_exist = QMessageBox()
+                student_not_exist.setWindowTitle('Student Delete')
+                student_not_exist.setText('Student with ID Number: ' + id_value + ' does not exist!')
+                student_not_exist.setIcon(QMessageBox.Critical)
+                student_not_exist.setStandardButtons(QMessageBox.Close)
+                student_not_exist.exec_()
+            #  Write the updated list of dictionaries back to the CSV file
+            with open(filename_studentCSV, 'w', newline='') as csvfile:
+                writer = csv.DictWriter(csvfile, fieldnames=student_field_csv)
+                writer.writerows(rows)
+                # Popup notification if student info is deleted
+        else:
+            # Popup notification if the user presses ok without inputing ID number.
+            student_not_exist = QMessageBox()
+            student_not_exist.setWindowTitle('Student Delete')
+            student_not_exist.setText('Please enter student ID number.')
             student_not_exist.setIcon(QMessageBox.Critical)
             student_not_exist.setStandardButtons(QMessageBox.Close)
             student_not_exist.exec_()
Index: university_records.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>IDNumber,Name,Year Level,Gender,Course Code\r\n2022-0423,John,2,Male,BSCS\r\n2023-0454,Jack,2,Male,BSEE\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/university_records.csv b/university_records.csv
--- a/university_records.csv	(revision 08bc10c42e548d444fea2ee96d77ba2b610bada3)
+++ b/university_records.csv	(date 1709382161136)
@@ -1,3 +1,2 @@
 IDNumber,Name,Year Level,Gender,Course Code
-2022-0423,John,2,Male,BSCS
-2023-0454,Jack,2,Male,BSEE
+2022-0423,John Christian Nino T. Abuel,2,Male,BSCS
